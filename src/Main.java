public class Main {
    public static void main(String[] args) {
            //clear code
//        Рефакторинг — это, в первую очередь, превращение грязного кода в чистый.
//        Чистый код проходит все тесты
//        Если программа проходит только 95% тестов, значит где-то у вас завелся грязный код.
//        Если у вас вообще нет тестов, вы не проходите этот пункт автоматически.
//        Чистый код очевиден для других программистов
//        И я не говорю о каких-то супер сложных алгоритмах. Плохое именование переменных,
//        раздутые классы и методы — всё это размывает очевидность кода.
//        Чистый код не содержит дублирования
//        Если приходится изменять участок кода с дублированием,
//        нужно будет не забыть внести эти же изменения и в других местах, где код повторяется.
//        Чистый код содержит минимум классов и других движущихся частей
//        Чем меньше кода, тем меньше его нужно держать в голове. Чем меньше кода, тем меньше вероятность его сломать.
//        Чистый код легче и дешевле поддерживать!

//        Все люди изначально стараются писать чистый код.
//        Вряд ли найдётся программист, который намеренно плодит грязный код во вред проекту.
//        Но тогда почему чистый код становится грязным?
//        Впервые метафору «технического долга», относительно грязного кода, предложил Говард Каннингэм.
//        Взяв кредит в банке, вы сможете ускорить какое-то приобретение.
//        Однако вернуть вам предстоит не только основную сумму кредита,
//        но и дополнительные проценты, которые набегут за то время, пока вы не погасите заём.
//        Также, вы можете взять несколько кредитов одновременно.
//        Более того - вы можете набрать столько кредитов,
//        что сумма процентов перевесит ваш совокупный доход и сделает полное погашение невозможным.
//        То же происходит и с кодом. Сегодня вы временно ускоритесь, не написав тесты для новой фичи.
//        Но каждый день пока эту фичу приходится тестировать руками, замедляет ваш общий прогресс.
//        В какой-то момент, сумма этого времени превысит ту, которую вы бы потратили на изначальное написание теста.

//        Правило трёх
//        Делая что-то в первый раз, вы просто это делаете.
//        Делая что-то аналогичное во второй раз,
//        вы морщитесь от необходимости повторения, но все-таки повторяете то же самое.
//        Делая что-то похожее в третий раз, вы начинаете рефакторинг.
    }
}
